set nocompatible
set clipboard+=unnamedplus
syntax enable
syntax on
colorscheme gruvbox
if exists("&termguicolors")
    set termguicolors
endif
let g:molokai_original=1
set nohlsearch
set background=dark

try
    packloadall
catch
endtry

silent! helptags ALL
let python_highlight_all=1
let mapleader=" "

" can't remember what this does but don't change it
set formatoptions=cql

" remap window split keybinds
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" remap double leader press to switch to last visited buffer
nnoremap <leader><leader> <C-^>
    
" tab settings
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent

au BufNewFile,BufRead *.conf
    \ set autoindent |
    \ set noexpandtab |
    \ set tabstop=4 |
    \ set shiftwidth=4

au BufNewFile,BufRead *.html
    \ set shiftwidth=2 |
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set expandtab

" PEP 8 Style guide for python files "

au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

" golang specific settings
au BufNewFile,BufRead *.go
    \ set tabstop=4 |
    \ set textwidth=99 |
    \ set noexpandtab |
    \ set autoindent |
    \ set fileformat=unix |
    \ set filetype=go

" YAML file format settings
au BufNewFile,BufRead *.yml
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |
    \ set expandtab |
    \ set autoindent 

let g:go_highlight_structs = 1
let g:go_highlight_methods = 1
let g:go_highlight_functions = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" prose settings
au BufNewFile,BufRead *.prose
    \ setlocal formatoptions=ant |
    \ setlocal textwidth=80 |
    \ setlocal wrapmargin=0 |
    \ setlocal noautoindent |
    \ setlocal nocindent |
    \ setlocal nosmartindent |
    \ setlocal indentexpr=  |
    \ setlocal foldcolumn=10 |
    \ set nonumber |
    \ set norelativenumber |
    \ setlocal columns=100

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype indent plugin on
set hidden

" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" Stop certain movements from always going to the first character of a line.
set nostartofline

" Display the cursor position on the last line of the screen
set ruler

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" Enable use of the mouse for all modes
set mouse=a

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set number
set relativenumber

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=10

" permanent undo (saves after file is closed)
set undodir=~/.vim_undo
set undofile

" open new splits to the right and below
set splitright
set splitbelow

" VIM-PLUG SECTION "
" add plugins after call plug#begin() in form "
" Plug 'path/to/plugin' "
try
    call plug#begin('~/.vim/plugged')

    "Misc.
    Plug 'scrooloose/nerdtree'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'vimwiki/vimwiki'
    Plug 'Shougo/deoplete.nvim'

    "Language Specific
    Plug 'leafgarland/typescript-vim'
    Plug 'MaxMEllon/vim-jsx-pretty'
    Plug 'kongo2002/fsharp-vim'
    Plug 'vim-python/python-syntax'
    Plug 'octol/vim-cpp-enhanced-highlight'
    Plug 'pangloss/vim-javascript'
    Plug 'OrangeT/vim-csharp'
    Plug 'Omnisharp/omnisharp-vim'
    Plug 'rust-lang/rust.vim'

    call plug#end()

    " vimwiki stuff
    let g:vimwiki_list = [
                           \{'path': '~/Documents/vimwiki/'}
                        \]

    au BufRead,BufNewFile *.wiki set filetype=vimwiki
    ":autocmd FileType vimwiki map d :VimwikiMakeDiaryNote

    " vim-airline   vim-airline-themes"
    if g:colors_name=='gruvbox'
        let g:airline_theme='base16_gruvbox_dark_hard'
    elseif g:colors_name=='molokai'
        let g:airline_theme='base16_molokai'
    elseif g:colors_name=='dracula'
        let g:airline_theme='dracula'
    else
        let g:airline_theme='base16_molokai'
    endif

    " vim-python/python-syntax settings override "

    let g:python_highlight_all=1
    let g:python_highlight_space_errors=0
catch
endtry
