" =================================================================
" Editor Settings
" =================================================================

" enable syntax processing
if !exists("g:syntax_on")
    syntax enable
endif

" use python 3 by default
let g:pyxversion=3

" if terminal supports 'termguicolors', turn it on
if exists("&termguicolors")
    set termguicolors
endif

" map leader key to space bar
let mapleader="\<Space>"
let maplocalleader="\<Space>"

" if ripgrep is installed, use it for grep commands within vim
if executable('rg')
    set grepprg=rg\ --no-heading\ --vimgrep
    set grepformat=%f:%l:%c:%m
endif

" =====================================================
" Mappings
" =====================================================

" remap window split keybinds
" uses CTRL+<h,j,k,l> to navigate windows
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" remap code-folding keybinds
" leader+f+<C,O> closes, opens folds recursively up to the top level
" leader+f+<c,o> closes, opens the current fold
" leader+f+<f,F> closes, opens all folds in the buffer
nnoremap <leader>fc zc
nnoremap <leader>fC zC
nnoremap <leader>fo zo
nnoremap <leader>fO zO
nnoremap <leader>ff zM
" zz to center the screen on your cursor after opening folds
nnoremap <leader>fF zR zz

" remap double leader press to switch to last visited buffer
nnoremap <leader><leader> <C-^>

" mappings to fuzzy search by file or buffer
" <leader>sf for search files
" <leader>sb for search buffers
" <leader>ss search with ripgrep
nnoremap <leader>sf :Files<CR>
nnoremap <leader>sb :Buffers<CR>
nnoremap <leader>ss :Rg<CR>
"map <C-p> :Files<CR>
"nmap <leader>; :Buffers<CR>

" center search results
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz

" very magic search by default (uses special characters as special search characters
" and requires literals to be escaped
nnoremap ? ?\v
nnoremap / /\v
cnoremap %s/ %sm/

" *********************************************
" Tab/Spacing Settings For Different File Types
" *********************************************

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype indent plugin on

" use 4 spaces as a tab/shift width
set shiftwidth=4
set softtabstop=4
" replace tabs with spaces
set expandtab
" automatically indent when going to a new line
set autoindent
" smart autoindenting when starting a new line
set smartindent
" use 'shiftwidth' to insert and delete blanks
set smarttab

" insert tabs when using .conf files (it's important)
au BufNewFile,BufRead *.conf
    \ set autoindent |
    \ set noexpandtab |
    \ set tabstop=4 |
    \ set shiftwidth=4

au BufNewFile,BufRead *.html,*.htm
    \ set shiftwidth=2 |
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set expandtab

" PEP 8 Style guide for python files "
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

" golang specific settings
au BufNewFile,BufRead *.go
    \ set tabstop=4 |
    \ set textwidth=99 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |
    \ set filetype=go

" turn on golang highlighting options
let g:go_highlight_structs = 1
let g:go_highlight_methods = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_format_strings = 1

" set some useful options for vim-go
let g:go_fmt_fail_silently = 1
let g:go_imports_autosave = 1

" YAML file format settings
au BufNewFile,BufRead *.yml,*.yaml
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |
    \ set expandtab |
    \ set autoindent 

" prose settings
au BufNewFile,BufRead *.prose
    \ setlocal formatoptions=ant |
    \ setlocal textwidth=80 |
    \ setlocal wrapmargin=0 |
    \ setlocal noautoindent |
    \ setlocal nocindent |
    \ setlocal nosmartindent |
    \ setlocal indentexpr=  |
    \ execute "CocDisable" |
    \ set nonumber |
    \ set norelativenumber |
    \ setlocal columns=100

" Jump to last edit position on opening file
if has("autocmd")
  " https://stackoverflow.com/questions/31449496/vim-ignore-specifc-file-in-autocommand
  au BufReadPost * if expand('%:p') !~# '\m/\.git/' && line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" ****************************
" Misc. Editor Settings
" ****************************

" hide rather than unload buffers when they are abandoned (closed)
set hidden

" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" show current matches while typing in search
set incsearch

" don't highlight text when searching
set nohlsearch

" when search and replacing, replace all matches on the line by default
set gdefault

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" Stop certain movements from always going to the first character of a line.
set nostartofline

" Display the cursor position on the last line of the screen
set ruler

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" Enable use of the mouse for all modes
set mouse=a

" Set the command window height to 2 lines, to avoid many cases of having to
" 'press <Enter> to continue'
set cmdheight=2

" Display line numbers on the left
set number
set relativenumber

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=10

" permanent undo (saves after file is closed)
set undodir=~/.vim_undo
set undofile

" open new splits to the right and below
set splitright
set splitbelow

" set clipboard to use system clipboard
set clipboard+=unnamedplus

" probably useless, but keep just in case
set nocompatible

" can't remember what this does but don't change it
set formatoptions=cql

" draw a line at 80 columns
set colorcolumn=80

" automatically change to the directory of the current file when switching
" files/buffers
set autochdir

" Save whenever switching windows or leaving vim. This is useful when running
" the tests inside vim without having to save all files first.
au FocusLost,WinLeave * :silent! noautocmd wa

" Trigger autoread when changing buffers or coming back to vim.
au FocusGained,BufEnter * :silent! !

" wrapped lines will continue at the same indentation level
set breakindent

" set the file browser to use the current buffer's directory
set browsedir=buffer

" code folds will be automatically created based on the syntax settings of the
" current buffer
set foldmethod=syntax

" start with code completely unfolded when opening a file
set nofoldenable

" screen will not be redrawn when executing macros, registers and some
" other commands (should improve performance)
" set lazyredraw

" setting to nolazyredraw because of some issues of buffers not being redrawn
" when switching between tmux panes
set nolazyredraw

" round indent number to a multiple of 'shiftwidth' when using '>' and '<'
" keys to indent lines
set shiftround

" when in selection or visual mode, allows the cursor to go to parts it would
" not normally be able to go, such as off the end of a line.
set virtualedit=block,onemore

" write to swap file every after 300 ms of inactivity
set updatetime=300

" disable file backup. some autocomplete servers have issues with backup files
set nobackup
set nowritebackup

" don't give |ins-completion-menu| messages (prevents unneccesary feedback)
set shortmess+=c

" always show signcolumn. prevents buffer from moving when showing/hiding it
set signcolumn=yes

" always keep at least 2 lines above and below the cursor
set scrolloff=2

" don't insert a space when joining lines
set nojoinspaces

" ***************************
" Vim-Plug Section
" ***************************
try
    if isdirectory(expand('~/.vim/plugged'))
        call plug#begin(expand('~/.vim/plugged'))

        if has('nvim')
            " Autocompletion and syntax highlighting
            Plug 'neoclide/coc.nvim', {'branch': 'release'}
        else
            " syntax highlighting plugins to use if using regular ole vim:
            Plug 'OrangeT/vim-csharp'
            Plug 'leafgarland/typescript-vim'
            Plug 'rust-lang/rust.vim'
        endif

        " various colorschemes
        Plug 'hardselius/warlock'
        Plug 'morhetz/gruvbox'

        " Javascript/Typescript
        Plug 'HerringtonDarkholme/yats.vim'
        Plug 'MaxMEllon/vim-jsx-pretty'

        " Python
        Plug 'vim-python/python-syntax'

        " Go
        "Plug 'fatih/vim-go'

        " F#
        Plug 'kongo2002/fsharp-vim'

        " C++
        Plug 'octol/vim-cpp-enhanced-highlight'

        " Swift
        Plug 'keith/swift.vim'

        " Common Lisp
        "Plug 'vlime/vlime', {'rtp': 'vim/'}
        "Plug 'kovisoft/paredit'

        " Fuzzy searching
        Plug 'airblade/vim-rooter'
        Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
        Plug 'junegunn/fzf.vim'

        "Misc.
        Plug 'scrooloose/nerdtree'
        Plug 'ryanoasis/vim-devicons'
        Plug 'vim-airline/vim-airline'
        Plug 'vim-airline/vim-airline-themes'
        Plug 'vimwiki/vimwiki'

        Plug 'christoomey/vim-tmux-navigator'
        Plug 'melonmanchan/vim-tmux-resizer'

        call plug#end()
    endif
catch
    echo v:exception
endtry

" *************************
" Colorscheme Settings
" *************************
colorscheme gruvbox
set background=dark

" vim-airline   vim-airline-themes"
if g:colors_name=='gruvbox'
    let g:airline_theme='base16_gruvbox_dark_hard'
elseif g:colors_name=='warlock'
    let g:airline_theme='monochrome'
else
    let g:airline_theme='monochrome'
endif

" ***************************
" Plugin specific settings
" ***************************

map <leader>nt :NERDTreeToggle<CR>
map <leader>nf :NERDTreeFocus<CR>
let g:NERDTreeWinPos = "left"

" vimwiki stuff
let g:vimwiki_list = [
                       \{'path': '~/Documents/vimwiki/'}
                    \]

au BufRead,BufNewFile *.wiki set filetype=vimwiki
":autocmd FileType vimwiki map d :VimwikiMakeDiaryNote

" vim-python/python-syntax settings override "
let g:python_highlight_all=1
let g:python_highlight_space_errors=0

" vim-rooter settings
let g:rooter_change_directory_for_non_project_files = 'current'
let g:rooter_silent_chdir = 1

" fzf settings
" set layout to bottom of screen and roughly 20% of it's height
let g:fzf_layout = { 'down': '~20%' }

" match fzf colors to current color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

" coc.nvim settings
let g:coc_global_extensions=[
    \ 'coc-clangd',
    \ 'coc-python',
    \ 'coc-json',
    \ 'coc-tsserver',
    \ 'coc-html',
    \ 'coc-css',
    \ 'coc-omnisharp',
    \ 'coc-rls',
    \ 'coc-go',
    \ 'coc-cl'
    \ ]

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
if isdirectory(expand('~/.vim/plugged'))
    "inoremap <silent><expr> <TAB>
    "    \ pumvisible() ? "\<C-n>" :
    "    \ <SID>check_back_space() ? "\<TAB>" :
    "    \ coc#refresh()
    inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" : "\<TAB>"     
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
endif

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Remap keys for gotos
nmap <leader>gd <Plug>(coc-definition)
nmap <leader>gt <Plug>(coc-type-definition)
nmap <leader>gi <Plug>(coc-implementation)
nmap <leader>gr <Plug>(coc-references)

" (sd for show documentation)
nnoremap <leader>sD :call <SID>show_documentation()<CR>

" Navigate diagnosticts errors (ge for goto error)
nmap <leader>ge <Plug>(coc-diagnostic-next)
nmap <leader>gE <Plug>(coc-diagnostic-prev)

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" Turn off coc.nvim for certain file types
au BufRead,BufNewFile *.wiki,*.txt CocDisable
